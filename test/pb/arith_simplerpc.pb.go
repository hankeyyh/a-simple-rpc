// Code generated by protoc-gen-simple-rpc. DO NOT EDIT.

package pb

import (
	context "context"
	client "github.com/hankeyyh/a-simple-rpc/client"
	protocol "github.com/hankeyyh/a-simple-rpc/protocol"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type Arith interface {
	Add(ctx context.Context, args *Args, reply *Reply) (err error)
	Sub(ctx context.Context, args *Args, reply *Reply) (err error)
	Mul(ctx context.Context, args *Args, reply *Reply) (err error)
	Divide(ctx context.Context, args *Args, reply *Reply) (err error)
}

// ================== client stub ===================
// Arith is a client wrapped XClient.
type ArithClient struct {
	xclient client.XClient
}

// newArithClient wraps a XClient as ArithClient.
// You can pass a shared XClient object created by NewXClientForArith.
func NewArithClient(xclient client.XClient) *ArithClient {
	return &ArithClient{xclient: xclient}
}

// NewXClientForArith creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForArith(addr string, failMode client.FailMode, selectMode client.SelectMode, d client.ServiceDiscovery, opt client.Option) client.XClient {
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Arith", failMode, selectMode, d, opt)

	return xclient
}

func (c *ArithClient) Add(ctx context.Context, args *Args) (reply *Reply, err error) {
	reply = &Reply{}
	err = c.xclient.Call(ctx, "Add", args, reply)
	return reply, err
}
func (c *ArithClient) Sub(ctx context.Context, args *Args) (reply *Reply, err error) {
	reply = &Reply{}
	err = c.xclient.Call(ctx, "Sub", args, reply)
	return reply, err
}
func (c *ArithClient) Mul(ctx context.Context, args *Args) (reply *Reply, err error) {
	reply = &Reply{}
	err = c.xclient.Call(ctx, "Mul", args, reply)
	return reply, err
}
func (c *ArithClient) Divide(ctx context.Context, args *Args) (reply *Reply, err error) {
	reply = &Reply{}
	err = c.xclient.Call(ctx, "Divide", args, reply)
	return reply, err
}
func (c *ArithClient) Close() error {
	return c.xclient.Close()
}
